// <auto-generated />
using Library;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace Library.Migrations
{
    [DbContext(typeof(LibraryContext))]
    partial class LibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Library.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("name")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Library.Models.LibraryAsset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("libraryAssets");

                    b.HasDiscriminator<string>("Discriminator").HasValue("LibraryAsset");
                });

            modelBuilder.Entity("Library.Models.Speciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CreateAdminId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(70);

                    b.Property<int?>("MechanicId");

                    b.HasKey("Id");

                    b.HasIndex("CreateAdminId");

                    b.HasIndex("MechanicId");

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("Library.Models.Mechanic", b =>
                {
                    b.HasBaseType("Library.Models.LibraryAsset");

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<int?>("CreateAdminId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<int?>("CreateUserId");

                    b.Property<bool>("IsActive");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("MechanicName")
                        .HasMaxLength(70);

                    b.Property<int>("PersonnalCount");

                    b.Property<string>("ShopName")
                        .HasMaxLength(70);

                    b.HasIndex("CreateAdminId");

                    b.HasIndex("CreateUserId");

                    b.ToTable("Mechanic");

                    b.HasDiscriminator().HasValue("Mechanic");
                });

            modelBuilder.Entity("Library.Models.Review", b =>
                {
                    b.HasBaseType("Library.Models.LibraryAsset");

                    b.Property<int?>("CreateAdminId")
                        .HasColumnName("Review_CreateAdminId");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnName("Review_CreateDate");

                    b.Property<int?>("CustomerId");

                    b.Property<int>("CustomerService");

                    b.Property<bool>("IsActive")
                        .HasColumnName("Review_IsActive");

                    b.Property<int>("LocationAndAccessibilty");

                    b.Property<int?>("MechanicId");

                    b.Property<int>("OverAll");

                    b.Property<int>("Reliability");

                    b.Property<string>("ReviewNotes");

                    b.Property<int>("SpeedOfService");

                    b.Property<int>("ValueForPrice");

                    b.HasIndex("CreateAdminId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MechanicId");

                    b.ToTable("Review");

                    b.HasDiscriminator().HasValue("Review");
                });

            modelBuilder.Entity("Library.Models.User", b =>
                {
                    b.HasBaseType("Library.Models.LibraryAsset");

                    b.Property<int?>("CreateAdminId")
                        .HasColumnName("User_CreateAdminId");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnName("User_CreateDate");

                    b.Property<string>("Firstname")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive")
                        .HasColumnName("User_IsActive");

                    b.Property<string>("Lastname")
                        .HasMaxLength(50);

                    b.Property<string>("Username")
                        .HasMaxLength(30);

                    b.Property<string>("VehicleBrand")
                        .HasMaxLength(70);

                    b.Property<string>("VehicleManfacturer")
                        .HasMaxLength(70);

                    b.Property<string>("email")
                        .HasMaxLength(50);

                    b.HasIndex("CreateAdminId");

                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Library.Models.Speciality", b =>
                {
                    b.HasOne("Library.Models.Admin", "CreateAdmin")
                        .WithMany()
                        .HasForeignKey("CreateAdminId");

                    b.HasOne("Library.Models.Mechanic")
                        .WithMany("SpecializationCode")
                        .HasForeignKey("MechanicId");
                });

            modelBuilder.Entity("Library.Models.Mechanic", b =>
                {
                    b.HasOne("Library.Models.Admin", "CreateAdmin")
                        .WithMany()
                        .HasForeignKey("CreateAdminId");

                    b.HasOne("Library.Models.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId");
                });

            modelBuilder.Entity("Library.Models.Review", b =>
                {
                    b.HasOne("Library.Models.Admin", "CreateAdmin")
                        .WithMany()
                        .HasForeignKey("CreateAdminId");

                    b.HasOne("Library.Models.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Library.Models.Mechanic", "Mechanic")
                        .WithMany()
                        .HasForeignKey("MechanicId");
                });

            modelBuilder.Entity("Library.Models.User", b =>
                {
                    b.HasOne("Library.Models.Admin", "CreateAdmin")
                        .WithMany()
                        .HasForeignKey("CreateAdminId");
                });
#pragma warning restore 612, 618
        }
    }
}
